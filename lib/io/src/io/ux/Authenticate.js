/**
* Default authentication panel used by Ext.io.Controller when the user needs to login.
*
* Subclass or replace this class ot create a custom user login experience. 
* Ext.io.Controller listens to events generated by this class and will call methods
* where noted.  To work correctly any replacement or sub-class must provide the same interface.
*
*/
if(!Ext.getVersion('extjs')){
Ext.define("Ext.io.ux.Authenticate", {
    extend: 'Ext.Container',
    requires: ["Ext.TitleBar", "Ext.form.Panel", "Ext.form.FieldSet", "Ext.field.Password",  "Ext.field.Email"],
    
    
    
    
    /**
     * @event loginUser
     * Fired when the user has entered their auth credentials.
     * {Ext.io.Controller} listens for this event and will attempt to login 
     * the user with the passed credentials. 
     * @param {Object} auth Key/values given by the user to authenticate with.
     */
     
     /**
      * @event registerUser
      * Fired when the user wants to create a new account.
      * {Ext.io.Controller} listens for this event and will attempt 
      * to registers the user with the passed information.
      * @param {Object} auth Key/values given by the user to register with.
      */
     
    /**
      * @event cancel
      * Fired when the user doesn't want to login.
      * {Ext.io.Controller} listens for this event and will 
      * close the login pannel.
      */
     
    
    config: {
        id: "loginpanel",
        layout: "fit",
        fullscreen: true,
        
        control: {
            "button[action=siologin]": {
                tap: "doAuth"
            },
            
            "button[action=showRegister]": {
              tap: "showRegister"
            },

            "button[action=sioRegister]": {
              tap: "doRegister"
            },
            
            "button[action=cancellogin]": {
              tap: "hideLogin"
            }
        },

 
        items: [
        {
            docked: 'top',
            xtype: 'titlebar',
            title: 'Login',
            items: [
            {
                text: "cancel",
                action: "cancellogin"
            },
             {
                  text: "register",
                  action: "showRegister",
                  align: 'right'
              }
            ]
        },
        {
            xtype: "panel",
            layout: "fit",
            items: [
            {
                xtype: "formpanel",
                items: [
                {
                    xtype: 'fieldset',
                    items: [
                    {
                        xtype: 'textfield',
                        placeHolder: "Username",
                        name: 'username'
                    },
                    {
                        xtype: 'passwordfield',
                        placeHolder: "Password",
                        name: 'password'
                    },
                    {
                        xtype: 'emailfield',
                        placeHolder: "Email",
                        name: 'email',
                        hidden: true
                    },
                    {
                        xtype: 'button',
                        text: 'Login',
                        action: "siologin"
                    },
                    {
                        xtype: 'button',
                        text: 'Register',
                        action: "sioRegister",
                        hidden: "true"
                    }
                    ]
                }
                ]

            }

            ]
        }
        ]
    },
    
    
    /**
    * Reset the form to its default state.
    */
    resetForm: function() {
      var form = this.getForm();
      form.reset();
      this.getEmailField().hide();
      this.getRegisterBtn().hide();
      this.getLoginBtn().show();
    },
    
    
    /**
    * @private
    */
    doAuth: function() {
      var form = this.getForm();
      var auth = form.getValues();
      this.fireEvent("loginUser", auth);
    },
    
    
    /**
    * {Ext.io.Controller} will call this method when login fails.
    */
    showLoginErrors: function() {
      Ext.Msg.alert('Login Error', 'Invalid username or passsword', Ext.emptyFn);
    },
    

    /**
    * @private
    */
    doRegister: function() {
      var form = this.getForm();
      var auth = form.getValues();
      this.fireEvent("registerUser", auth);
    },
    
    /**
    * @private
    */
    showRegister: function() {
      var email = this.getEmailField();
      email.show();
      this.getRegisterBtn().show();
      this.getLoginBtn().hide();
      
    },
    
    /**
    * {Ext.io.Controller} will call this method when registration fails.
    */
    showRegisterErrors: function(errors) {
      Ext.Msg.alert('Register Error', 'Could not create user', Ext.emptyFn);
    },
    
    
    /**
    * @private
    */
    hideLogin: function(){
      this.fireEvent("cancel");
    },
    
    /**
    * @private
    */
    getForm: function(){
      return this.query('.formpanel')[0];
    },
    
    /**
    * @private
    */
    getEmailField: function(){
      return this.query('.emailfield')[0];
    },
    
    /**
    * @private
    */
    getRegisterBtn: function(){
      return this.query('button[action=sioRegister]')[0];
    },
    
    /**
    * @private
    */
    getLoginBtn: function(){
      return this.query('button[action=siologin]')[0];
    }
    

});
}